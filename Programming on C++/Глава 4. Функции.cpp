//----------------------------------------------------------
//         Передача указателя аргументом функции
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Аргументами функции передаются указатели:
//void swap(char* a, char* b) 
//{
//    cout << "Вызывается функция swap()" << endl;
//    // Проверяются значения аргументов функции:
//    cout << "Первая переменная: " << *a << endl;
//    cout << "Вторая переменная: " << *b << endl;
//    // Изменение значений переменных:
//    char t = *b;
//    *b = *a;
//    *a = t;
//    for (int i = 1; i <= 20; i++)
//    {
//        cout << "-";
//    }
//    cout << endl;
//    // Проверяются значения переменных:
//    cout << "Первая переменная: " << *a << endl;
//    cout << "Вторая переменная: " << *b << endl;
//    cout << "Выполнение функции swap() завершено" << endl;
//}
//// Главная функция программы:
//int main()
//{
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Переменные для передачи аргументами функции:
//    char x = 'A', y = 'B';
//    // Проверяются значения переменных:
//    cout << "Первая переменная: " << x << endl;
//    cout << "Вторая переменная: " << y << endl;
//    // Вызов функции:
//    swap(&x, &y);
//    // Проверяются значения переменных:
//    cout << "Первая переменная: " << x << endl;
//    cout << "Вторая переменная: " << y << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//         Передача массива аргументом функции
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Передача функции аргументом массива:
//double mean(double* m, int n) {
//    // Локальная переменная для записи суммы
//    // значений элементов массива:
//    double s = 0;
//    // Вычисление суммы значений элементов массива:
//    for (int k = 0; k < n; k++) 
//    {
//        s += m[k];
//    }
//    // Результат функции - среднее значение:
//    return s / n;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Первый массив:
//    double A[] = { 1,3,8,-2,4 };
//    // Второй массив:
//    double B[] = { 4,6,2 };
//    // Вызов функции с передачей аргументом массива:
//    cout << "Среднее по массиву A: " << mean(A, 5) << endl;
//    cout << "Среднее по массиву B: " << mean(B, 3) << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//   Передача двумерного динамического массива в функцию
//----------------------------------------------------------
//#include <cstdio>
//#include <cstdlib>
//using namespace std;
//// Функции аргументом передается двумерный
//// динамический массив:
//void show(int** M, int p, int n) {
//    for (int i = 0; i < p; i++) {
//        for (int j = 0; j < n; j++) {
//            printf("%4d", M[i][j]);
//        }
//        printf("\n");
//    }
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Размеры динамического массива
//    // и индексные переменные:
//    int a = 3, b = 5, i, j;
//    // Создание массива указателей:
//    int** A = new int* [a];
//    // Создание и заполнение внутренних массивов:
//    for (i = 0; i < a; i++) {
//        A[i] = new int[b];
//        for (j = 0; j < b; j++) {
//            // Значение элемента массива:
//            A[i][j] = i * b + j + 1;
//        }
//    }
//    printf("Содержимое массива:\n");
//    // Отображение содержимого массива:
//    show(A, a, b);
//    // Удаление внутренних массивов:
//    for (i = 0; i < a; i++) {
//        delete[] A[i];
//    }
//    // Удаление массива указателей:
//    delete[] A;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//            Указатель как результат функции
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Функция результатом возвращает
//// указатель на элемент массива:
//int* getMax(int* nums, int n) {
//    int i = 0, k;
//    // Определение индекса наибольшего элемента:
//    for (k = 0; k < n; k++) {
//        if (nums[k] > nums[i]) {
//            i = k;
//        }
//    }
//    // Результат функции - указатель на элемент:
//    return nums + i;
//}
//// Функция для отображения содержимого массива:
//void show(int* nums, int n) {
//    for (int i = 0; i < n; i++) {
//        cout << nums[i] << " ";
//    }
//    cout << endl;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Размер массива:
//    const int size = 10;
//    // Создание массива:
//    int numbers[size] = { 1,5,8,2,4,9,11,9,12,3 };
//    // Отображение содержимого массива:
//    show(numbers, size);
//    // Запись результат функции в указатель:
//    int* maxPnt = getMax(numbers, size);
//    // Отображение максимального значения:
//    cout << "Максимальное значение: " << *maxPnt << endl;
//    // Присваивание значения элементу:
//    *maxPnt = -100;
//    // Отображение содержимого массива:
//    show(numbers, size);
//    // Значение присваивается переменной:
//    int maxNum = *getMax(numbers, size);
//    // Проверка максимального значения:
//    cout << "Максимальное значение: " << maxNum << endl;
//    // Присваивание значения переменной:
//    maxNum = -200;
//    // Проверка содержимого массива:
//    show(numbers, size);
//    cout << "Максимальное значение: ";
//    // Вычисление нового наибольшего значения:
//    cout << *getMax(numbers, size) << endl;
//    cout << "Индекс элемента: ";
//    // Вычисление индекса элемента с наибольшим значением:
//    cout << getMax(numbers, size) - numbers << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//            Ссылка как результат функции
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Функция результатом возвращает
//// ссылку на элемент массива:
//int& getMax(int* nums, int n) {
//    int i = 0, k;
//    // Определение индекса наибольшего элемента:
//    for (k = 0; k < n; k++) {
//        if (nums[k] > nums[i]) {
//            i = k;
//        }
//    }
//    // Результат функции - ссылка на элемент:
//    return nums[i];
//}
//// Функция для отображения содержимого массива:
//void show(int* nums, int n) {
//    for (int i = 0; i < n; i++) {
//        cout << nums[i] << " ";
//    }
//    cout << endl;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Размер массива:
//    const int size = 10;
//    // Создание массива:
//    int numbers[size] = { 1,5,8,2,4,9,11,9,12,3 };
//    // Отображение содержимого массива:
//    show(numbers, size);
//    // Запись результат функции в переменную:
//    int maxNum = getMax(numbers, size);
//    // Отображение максимального значения:
//    cout << "Максимальное значение: " << maxNum << endl;
//    // Присваивание значения переменной:
//    maxNum = -100;
//    // Отображение содержимого массива:
//    show(numbers, size);
//    // Результат функции записывается в ссылку:
//    int& maxRef = getMax(numbers, size);
//    // Проверка максимального значения:
//    cout << "Максимальное значение: " << maxRef << endl;
//    // Присваивание значения ссылке:
//    maxRef = -200;
//    // Проверка содержимого массива:
//    show(numbers, size);
//    cout << "Максимальное значение: ";
//    // Вычисление нового наибольшего значения:
//    cout << getMax(numbers, size) << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//        Динамический массив как результат функции
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Результат функции - динамический массив
//// с числами Фибоначчи:
//int* fibs(int n) {
//    int* nums = new int[n];
//    for (int i = 0; i < n; i++) {
//        if (i == 0 || i == 1) {
//            nums[i] = 1;
//        }
//        else {
//            nums[i] = nums[i - 1] + nums[i - 2];
//        }
//    }
//    return nums;
//}
//// Результат функции - динамический массив
//// со случайными числами:
//int* myrand(int m) {
//    int* nums = new int[m];
//    for (int i = 0; i < m; i++) {
//        nums[i] = rand() % 10;
//    }
//    return nums;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Инициализация генератора случайных чисел:
//    srand(2);
//    // Переменные:
//    int n = 10, m = 15, i;
//    // Указатель на целочисленное значение:
//    int* f;
//    // Создается динамический массив:
//    f = fibs(n);
//    // Отображение значений элементов
//    // динамического массива:
//    for (i = 0; i < n; i++) {
//        cout << f[i] << " ";
//    }
//    cout << endl;
//    // Удаление динамического массива:
//    delete[] f;
//    // Новый динамический массив:
//    f = myrand(m);
//    // Отображение содержимого массива:
//    for (i = 0; i < m; i++) {
//        cout << f[i] << " ";
//    }
//    cout << endl;
//    // Удаление динамического массива:
//    delete[] f;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//      Заполнение статического массива через функцию
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// В функцию передается массив для заполнения
//// числами Фибоначчи:
//void fibs(int* nums, int n) {
//    for (int i = 0; i < n; i++) {
//        if (i == 0 || i == 1) {
//            nums[i] = 1;
//        }
//        else {
//            nums[i] = nums[i - 1] + nums[i - 2];
//        }
//    }
//}
//// В функцию передается массив для заполнения
//// случайными числами:
//void myrand(int* nums, int m) {
//    for (int i = 0; i < m; i++) {
//        nums[i] = rand() % 10;
//    }
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Инициализация генератора случайных чисел:
//    srand(2);
//    // Размер массива:
//    const int n = 15;
//    // Массив:
//    int f[n];
//    // Заполнение массива числами Фибоначчи:
//    fibs(f, n);
//    // Отображение значений элементов массива:
//    for (int i = 0; i < n; i++) {
//        cout << f[i] << " ";
//    }
//    cout << endl;
//    // Заполнение массива случайными числами:
//    myrand(f, n);
//    // Отображение содержимого массива:
//    for (int i = 0; i < n; i++) {
//        cout << f[i] << " ";
//    }
//    cout << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//----------------------------------------------------------
//					УКАЗАТЕЛЬ НА ФУНКЦИЮ
//----------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//#include <cmath>
//using namespace std;
//// Функции с двумя аргументами (тип double и int),
//// возвращающие результат типа double:
//double f(double x, int n) {
//    double s = 1;
//    for (int k = 1; k <= n; k++) {
//        s *= (1 + x);
//    }
//    return s;
//}
//double g(double x, int n) {
//    double s = 1;
//    for (int k = 1; k <= n; k++) {
//        s *= x / k;
//    }
//    return s;
//}
//// Функции с одним аргументом (тип int),
//// возвращающие результат типа char:
//char h(int n) {
//    return 'A' + n;
//}
//char u(int n) {
//    return 'Z' - n;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Переменные для передачи аргументами:
//    double x = 2;
//    int n = 3;
//    // Указатели на функции:
//    double (*p)(double, int);
//    char (*q)(int);
//    double (*r)(double);
//    // Использование указателей на функции:
//    p = f;
//    cout << "| " << p(x, n) << " | ";
//    p = g;
//    cout << p(x, n) << " | ";
//    q = h;
//    cout << q(n) << " | ";
//    q = u;
//    cout << q(n) << " | ";
//    r = exp;
//    cout << r(x / 2) << " | ";
//    r = log;
//    cout << r(x) << " |\n";
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}
//-----------------------------------------------------------------------------------------------
//     Передача указателя на функцию аргументом функции при вычислении интеграла (стр. 152)
//-----------------------------------------------------------------------------------------------
//#include <iostream>
//#include <cstdlib>
//using namespace std;
//// Функция для вычисления интеграла. Первым аргументом
//// передается указатель на функцию:
//double integrate(double (*F)(double), double a, double b) {
//    int n = 1000;
//    double dx = (b - a) / n;
//    double s = (F(a) + F(b)) * dx / 2;
//    for (int k = 1; k <= n - 1; k++) {
//        s += F(a + dx * k) * dx;
//    }
//    return s;
//}
//// Подынтегральные функции:
//double f(double x) {
//    return x * (1 - x);
//}
//double g(double x) {
//    return 1 / x;
//}
//// Главная функция программы:
//int main() {
//    // Изменение кодировки консоли:
//    system("chcp 1251>nul");
//    // Первый интеграл:
//    cout << integrate(f, 0, 1) << endl;
//    // Второй интеграл:
//    cout << integrate(g, 1, 2) << endl;
//    // Задержка консольного окна:
//    system("pause>nul");
//    return 0;
//}